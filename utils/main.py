import streamlit as st
# import ollama
import whisper
import tempfile
import os
import sqlite3
import uuid
import subprocess
import pandas as pd
# import torch
import re
# import gdown
import asyncio
import sys

#–∞—Å–∏–Ω—Ö—Ä–æ–Ω–∫–∞
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


# –ü—É—Ç—å –∫ FFmpeg, –Ω—É–∂–µ–Ω –¥–ª—è —Å–ø–∏—á–∞ —Ç–µ–∫—Å—Ç, linux
# ffmpeg_path = r"C:\Program Files\FFmpeg\bin\ffmpeg.exe"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ FFmpeg
# os.environ['PATH'] += os.pathsep + os.path.dirname(ffmpeg_path)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
model = whisper.load_model("base")

# –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è subprocess
# subprocess.run = lambda *args, **kwargs: subprocess.run(*args, **kwargs, executable=ffmpeg_path)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('audio_insights.db')
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Å–∞–π—Ç–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS insights
                 (id TEXT PRIMARY KEY,
                  audio_name TEXT,
                  transcription TEXT,
                  insights TEXT,
                  created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS quizzes
                 (id TEXT PRIMARY KEY,
                  audio_name TEXT,
                  questions TEXT,
                  answers TEXT)''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS quiz_results
                 (id TEXT PRIMARY KEY,
                  quiz_id TEXT,
                  user_answers TEXT,
                  correct_answers TEXT,
                  score INTEGER)''')

    conn.commit()
    conn.close()


# –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()


def transcribe_audio(audio_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper"""
    result = model.transcribe(audio_path, fp16=False)
    return result['text']


def generate_insights(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Ollama"""   # previous large language model was llama2.
    # now we work with deepseek r1 model
    # response = ollama.chat(model='deepseek-r1', messages=[
    response = ollama.chat(model='llama2', messages=[
        {
            'role': 'system',
            'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞.'
        },
        {
            'role': 'user',
            'content': f'–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: {text}'
        }
    ])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    insights = response['message']['content']
    conn = sqlite3.connect('audio_insights.db')
    c = conn.cursor()
    insight_id = str(uuid.uuid4())
    c.execute("INSERT INTO insights (id, transcription, insights) VALUES (?, ?, ?)",
              (insight_id, text, insights))
    conn.commit()
    conn.close()

    return insights


def generate_quiz(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞"""
    response = ollama.chat(model='llama2', messages=[
        {
            'role': 'system',
            'content': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.'
        },
        {
            'role': 'user',
            'content': f'–°–æ–∑–¥–∞–π 5 –º–Ω–æ–≥–æ–≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ–∫—Å—Ç—É: {text}'
        }
    ])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    quiz_text = response['message']['content']
    conn = sqlite3.connect('audio_insights.db')
    c = conn.cursor()
    quiz_id = str(uuid.uuid4())
    c.execute("INSERT INTO quizzes (id, questions) VALUES (?, ?)",
              (quiz_id, quiz_text))
    conn.commit()
    conn.close()

    return quiz_id, quiz_text


def search_in_text(text, query):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    if not text or not query:
        return []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text_lower = text.lower()
    query_lower = query.lower()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫
    results = []
    start_index = 0

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
    sentences = re.split(r'[.!?]', text)

    for sentence in sentences:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        if query_lower in sentence.lower().strip():
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            clean_sentence = sentence.strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if clean_sentence and clean_sentence not in results:
                results.append(clean_sentence)

    return results


def download_video_from_drive(drive_link):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å Google –î–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
    match = re.search(r'drive.google.com/file/d/(.*?)/', drive_link)
    if not match:
        return None, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –î–∏—Å–∫."

    file_id = match.group(1)
    download_url = f"https://drive.google.com/uc?id={file_id}"

    temp_video_path = os.path.join(tempfile.gettempdir(), f"{file_id}.mp4")
    try:
        gdown.download(download_url, temp_video_path, quiet=False)
        return temp_video_path, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"

def extract_audio(video_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"""
    audio_path = video_path.replace(".mp4", ".wav")
    command = [ffmpeg_path, "-i", video_path, "-q:a", "0", "-map", "a", audio_path]
    subprocess.run(command, check=True)
    return audio_path


def main():
    st.title('üéß EduTube Ollama powered')
    drive_link = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å Google –î–∏—Å–∫–∞:")

    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    menu = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
                            ["–ó–∞–≥—Ä—É–∑–∫–∞ –ê—É–¥–∏–æ",
                             "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ò–Ω—Å–∞–π—Ç—ã",
                             "–ü—Ä–æ–π—Ç–∏ –¢–µ—Å—Ç",
                             "–ü–æ–∏—Å–∫ –≤ –¢–µ–∫—Å—Ç–µ"])

    if menu == "–ó–∞–≥—Ä—É–∑–∫–∞ –ê—É–¥–∏–æ":
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=['mp3', 'wav', 'm4a'])

        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ"):
            if drive_link:
                video_path, error = download_video_from_drive(drive_link)
                if error:
                    st.error(error)
                else:
                    st.success(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_path}")
                    st.video(video_path)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ Streamlit

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
                    try:
                        audio_path = extract_audio(video_path)
                        st.success(f"–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")

                        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                        transcription = transcribe_audio(audio_path)
                        st.write("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:", transcription)

                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
                        insights = generate_insights(transcription)
                        st.write("–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:", insights)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

        if uploaded_file is not None:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[1]) as temp_file:
                temp_file.write(uploaded_file.getvalue())
                temp_file_path = temp_file.name

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            st.subheader("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
            with st.spinner('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ...'):
                transcription = transcribe_audio(temp_file_path)
            st.text_area("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", transcription, height=200)

            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
            col1, col2 = st.columns(2)

            with col1:
                if st.button('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã'):
                    with st.spinner('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤...'):
                        insights = generate_insights(transcription)
                    st.success("–ò–Ω—Å–∞–π—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

            with col2:
                if st.button('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç'):
                    with st.spinner('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞...'):
                        quiz_id, quiz_text = generate_quiz(transcription)
                    st.success(f"–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω. ID: {quiz_id}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_file_path)

    elif menu == "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ò–Ω—Å–∞–π—Ç—ã":
        st.subheader("üí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ò–Ω—Å–∞–π—Ç—ã")
        conn = sqlite3.connect('audio_insights.db')
        insights = pd.read_sql_query("SELECT * FROM insights ORDER BY created_at DESC", conn)
        conn.close()

        for _, insight in insights.iterrows():
            with st.expander(f"–ò–Ω—Å–∞–π—Ç"):
                st.write(insight['insights'])

    elif menu == "–ü—Ä–æ–π—Ç–∏ –¢–µ—Å—Ç":
        st.subheader("‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–µ—Å—Ç—ã")
        conn = sqlite3.connect('audio_insights.db')
        quizzes = pd.read_sql_query("SELECT * FROM quizzes", conn)
        conn.close()

        selected_quiz = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç", quizzes['id'])

        if selected_quiz:
            conn = sqlite3.connect('audio_insights.db')
            quiz = pd.read_sql_query(f"SELECT * FROM quizzes WHERE id = '{selected_quiz}'", conn)
            conn.close()

            st.write(quiz['questions'].values[0])



    elif menu == "–ü–æ–∏—Å–∫ –≤ –¢–µ–∫—Å—Ç–µ":

        st.subheader("üîç –ü–æ–∏—Å–∫ –≤ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

        conn = sqlite3.connect('audio_insights.db')

        transcriptions = pd.read_sql_query("SELECT transcription FROM insights", conn)

        conn.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏

        if transcriptions.empty:

            st.warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ.")

        else:

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç

            full_text = " ".join(transcriptions['transcription'])

            query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")

            if query:

                results = search_in_text(full_text, query)

                if results:

                    st.write(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results)}")

                    for i, result in enumerate(results, 1):
                        st.text(f"{i}. {result}")

                else:

                    st.info("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")




if __name__ == "__main__":
    main()